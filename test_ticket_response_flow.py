#!/usr/bin/env python3
"""
Teste avan√ßado do fluxo de resposta a tickets com notifica√ß√µes Telegram.
Simula o comportamento real da aplica√ß√£o.
"""

import sys
import os
from app import get_db_connection

def simulate_ticket_response_logic():
    """Simula a l√≥gica de resposta a ticket conforme implementada no app.py"""
    print("=== Simula√ß√£o do Fluxo de Resposta a Ticket ===\n")
    
    try:
        conn = get_db_connection()
        
        # Buscar um ticket que tenha admin atribu√≠do
        ticket = conn.execute('''
            SELECT * FROM tickets 
            WHERE assigned_to IS NOT NULL 
            LIMIT 1
        ''').fetchone()
        
        if not ticket:
            print("‚ùå Nenhum ticket com admin atribu√≠do encontrado.")
            print("üí° Dica: Atribua um admin a algum ticket no dashboard administrativo.")
            conn.close()
            return
        
        ticket_id = ticket['id']
        print(f"üìã Usando ticket #{ticket_id} para simula√ß√£o")
        print(f"   - Assunto: {ticket['subject']}")
        print(f"   - Status: {ticket['status']}")
        print(f"   - Admin atribu√≠do ID: {ticket['assigned_to']}")
        
        # Buscar nome do administrador atribu√≠do (seguindo a l√≥gica do app.py)
        assigned_user = None
        if ticket['assigned_to']:
            assigned_user = conn.execute('SELECT name FROM users WHERE id = ?', (ticket['assigned_to'],)).fetchone()
        
        # Buscar informa√ß√µes do usu√°rio dono do ticket
        ticket_owner = conn.execute('SELECT name FROM users WHERE id = ?', (ticket['user_id'],)).fetchone()
        
        print(f"   - Admin atribu√≠do: {assigned_user['name'] if assigned_user else 'N/A'}")
        print(f"   - Usu√°rio dono: {ticket_owner['name'] if ticket_owner else 'N/A'}")
        
        # Simular mensagem de resposta do usu√°rio
        user_message = "Obrigado pela resposta! Agora consegui acessar o sistema sem problemas. O erro foi resolvido completamente."
        
        print(f"\nüí¨ Simulando resposta do usu√°rio:")
        print(f"   Mensagem: {user_message}")
        
        # Construir notifica√ß√£o seguindo a l√≥gica atualizada do app.py
        user_name = ticket_owner['name'] if ticket_owner else 'Usu√°rio'
        assignee = assigned_user['name'] if assigned_user and 'name' in assigned_user.keys() else None
        
        response_message = f"\U0001F4E8 <b>Nova Resposta do Usu√°rio</b>\n\n"
        response_message += f"<b>ID:</b> #{ticket_id}\n"
        response_message += f"<b>Usu√°rio:</b> {user_name}\n"
        if assignee:
            response_message += f"<b>Admin Atribu√≠do:</b> {assignee}\n"
        response_message += f"<b>Tipo:</b> {ticket.get('type', '')}\n"
        response_message += f"<b>Prioridade:</b> {ticket.get('priority', '')}\n"
        response_message += f"<b>Mensagem:</b> {user_message[:500]}{'...' if len(user_message) > 500 else ''}"
        
        print(f"\nüì§ Notifica√ß√£o Telegram que seria enviada:")
        print("=" * 50)
        print(response_message)
        print("=" * 50)
        
        # Simular resposta do admin
        admin_message = "Perfeito! Fico feliz que conseguiu resolver. Qualquer outro problema, pode abrir um novo chamado. Vou marcar este como resolvido."
        
        print(f"\nüë®‚Äçüíª Simulando resposta do admin:")
        print(f"   Mensagem: {admin_message}")
        
        admin_response_message = f"\U0001F4AC <b>Nova Resposta do Suporte</b>\n\n"
        admin_response_message += f"<b>ID:</b> #{ticket_id}\n"
        admin_response_message += f"<b>Respondido por:</b> {assignee or 'Admin'}\n"
        if assignee:
            admin_response_message += f"<b>Admin Atribu√≠do:</b> {assignee}\n"
        admin_response_message += f"<b>Tipo:</b> {ticket.get('type', '')}\n"
        admin_response_message += f"<b>Usu√°rio:</b> {user_name}\n"
        admin_response_message += f"<b>Mensagem:</b> {admin_message[:500]}{'...' if len(admin_message) > 500 else ''}"
        
        print(f"\nüì§ Notifica√ß√£o Telegram que seria enviada:")
        print("=" * 50)
        print(admin_response_message)
        print("=" * 50)
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {str(e)}")

def test_notification_topics():
    """Testa as configura√ß√µes de t√≥picos para diferentes tipos de evento"""
    print("\n=== Teste de Configura√ß√£o de T√≥picos ===\n")
    
    try:
        conn = get_db_connection()
        
        # Buscar todas as configura√ß√µes de t√≥picos
        topic_settings = {}
        topic_keys = [
            'telegram_topic_new_tickets',
            'telegram_topic_messages', 
            'telegram_topic_assignments',
            'telegram_topic_closed',
            'telegram_topic_cancelled'
        ]
        
        for key in topic_keys:
            row = conn.execute('SELECT value FROM settings WHERE key = ?', (key,)).fetchone()
            topic_settings[key] = row['value'] if row else ''
        
        print("üìã Configura√ß√£o atual dos t√≥picos:")
        print(f"   üÜï Novos tickets: {topic_settings['telegram_topic_new_tickets'] or 'N√£o configurado'}")
        print(f"   üí¨ Mensagens: {topic_settings['telegram_topic_messages'] or 'N√£o configurado'}")
        print(f"   üë§ Atribui√ß√µes: {topic_settings['telegram_topic_assignments'] or 'N√£o configurado'}")
        print(f"   ‚úÖ Fechados: {topic_settings['telegram_topic_closed'] or 'N√£o configurado'}")
        print(f"   ‚ùå Cancelados: {topic_settings['telegram_topic_cancelled'] or 'N√£o configurado'}")
        
        # Simular mapeamento de eventos para t√≥picos
        event_mappings = {
            'created': topic_settings['telegram_topic_new_tickets'],
            'assigned': topic_settings['telegram_topic_assignments'],
            'response_user': topic_settings['telegram_topic_messages'],
            'response_admin': topic_settings['telegram_topic_messages'],
            'status_changed': topic_settings['telegram_topic_messages'],
            'closed': topic_settings['telegram_topic_closed'],
            'cancelled': topic_settings['telegram_topic_cancelled'],
            'reopened': topic_settings['telegram_topic_new_tickets']
        }
        
        print(f"\nüéØ Mapeamento evento ‚Üí t√≥pico:")
        for event, topic_id in event_mappings.items():
            status = "‚úÖ" if topic_id else "‚ö†Ô∏è"
            print(f"   {status} {event}: {topic_id or 'Canal principal'}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao testar t√≥picos: {str(e)}")

def main():
    """Fun√ß√£o principal do teste avan√ßado"""
    print("üß™ TESTE AVAN√áADO - FLUXO DE RESPOSTA A TICKETS\n")
    
    # Verificar se o arquivo de banco existe
    if not os.path.exists('helpdesk.db'):
        print("‚ùå Banco de dados n√£o encontrado. Execute 'python database.py' primeiro.")
        return
    
    simulate_ticket_response_logic()
    test_notification_topics()
    
    print("\n‚úÖ Testes avan√ßados conclu√≠dos!")
    print("\nüéâ RESUMO DAS MELHORIAS IMPLEMENTADAS:")
    print("   ‚úì Admin atribu√≠do inclu√≠do nas notifica√ß√µes")
    print("   ‚úì Conte√∫do da mensagem inclu√≠do (at√© 500 caracteres)")
    print("   ‚úì Notifica√ß√µes tanto para resposta de usu√°rio quanto admin")
    print("   ‚úì Formata√ß√£o HTML melhorada para Telegram")
    print("   ‚úì Suporte completo a t√≥picos por tipo de evento")
    
    print("\nüîß Para testar em produ√ß√£o:")
    print("   1. Configure token do bot e group ID no dashboard admin")
    print("   2. Use /api/admin/telegram/test para verificar conectividade")
    print("   3. Atribua admins aos tickets existentes")
    print("   4. Adicione respostas aos tickets para ver as notifica√ß√µes")

if __name__ == "__main__":
    main()
